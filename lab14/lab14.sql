-- Задание №1
CREATE TABLE LAB14_TABLE (
    ID NUMBER PRIMARY KEY,
    TITLE NVARCHAR2(30),
    DESCRIPTION NVARCHAR2(100)
);
/


-- Задание №2
BEGIN
    FOR i IN 1..10 LOOP
        INSERT INTO LAB14_TABLE(ID, TITLE, DESCRIPTION)
        VALUES (i, 'Some title ' || i, 'Some description ' || i)
        ;
    END LOOP;
END;
/

SELECT * FROM LAB14_TABLE;
/


-- Задание №8
CREATE TABLE LAB14_AUDIT(
    OPERATION_DATE DATE,
    OPERATION_TYPE VARCHAR(10),
    TRIGGER_NAME VARCHAR(50),
    DATA VARCHAR(500)
);
/


-- Задание №3 (5, 9)
CREATE OR REPLACE TRIGGER LAB14_TABLE_BEFORE_INS_UPD_DEL_OPERATOR
BEFORE INSERT OR UPDATE OR DELETE ON LAB14_TABLE
DECLARE
    OPERATION VARCHAR(10);
BEGIN
    IF INSERTING THEN BEGIN
        OPERATION := 'INSERT';
    END;
    ELSIF UPDATING THEN BEGIN
        OPERATION := 'UPDATE';
    END;
    ELSIF DELETING THEN BEGIN
        OPERATION := 'DELETE';
    END;
    ELSE BEGIN
        OPERATION := 'UNKNOWN';
    END;
    END IF;
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_BEFORE_INS_UPD_DEL_OPERATOR: ' || OPERATION);
    INSERT INTO LAB14_AUDIT(OPERATION_DATE, OPERATION_TYPE, TRIGGER_NAME, DATA)
    VALUES (
        SYSDATE,
        OPERATION,
        'LAB14_TABLE_BEFORE_INS_UPD_DEL_OPERATOR',
        NULL
    );
END;
/


-- Задание №4 (5, 9)
CREATE OR REPLACE TRIGGER LAB14_TABLE_BEFORE_INS_UPD_DEL_ROW
BEFORE INSERT OR UPDATE OR DELETE ON LAB14_TABLE
FOR EACH ROW
DECLARE
    OPERATION VARCHAR(10);
    DATA NVARCHAR2(1000);
BEGIN
    IF INSERTING THEN BEGIN
        OPERATION := 'INSERT';
        DATA := :NEW.ID || ' ' || :NEW.TITLE || ' ' || :NEW.DESCRIPTION;
    END;
    ELSIF UPDATING THEN BEGIN
        OPERATION := 'UPDATE';
        DATA := :OLD.ID || ' ' || :OLD.TITLE || ' ' || :OLD.DESCRIPTION || ' => ' || :NEW.ID || ' ' || :NEW.TITLE || ' ' || :NEW.DESCRIPTION;
    END;
    ELSIF DELETING THEN BEGIN
        OPERATION := 'DELETE';
        DATA := :OLD.ID || ' ' || :OLD.TITLE || ' ' || :OLD.DESCRIPTION;
    END;
    ELSE BEGIN
        OPERATION := 'UNKNOWN';
        DATA := 'UNKNOWN';
    END;
    END IF;
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_BEFORE_INS_UPD_DEL_ROW: ' || OPERATION);
    INSERT INTO LAB14_AUDIT(OPERATION_DATE, OPERATION_TYPE, TRIGGER_NAME, DATA)
    VALUES (
        SYSDATE,
        OPERATION,
        'LAB14_TABLE_BEFORE_INS_UPD_DEL_ROW',
        DATA
    );
END;
/


-- Задание №6 (9)
CREATE OR REPLACE TRIGGER LAB14_TABLE_AFTER_INS_OPERATOR
AFTER INSERT ON LAB14_TABLE
BEGIN
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_AFTER_INS_OPERATOR: INSERT');
    INSERT INTO LAB14_AUDIT(OPERATION_DATE, OPERATION_TYPE, TRIGGER_NAME, DATA)
    VALUES (
        SYSDATE,
        'INSERT',
        'LAB14_TABLE_AFTER_INS_OPERATOR',
        NULL
    );
END;
/

CREATE OR REPLACE TRIGGER LAB14_TABLE_AFTER_UPD_OPERATOR
AFTER UPDATE ON LAB14_TABLE
BEGIN
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_AFTER_UPD_OPERATOR: UPDATE');
    INSERT INTO LAB14_AUDIT(OPERATION_DATE, OPERATION_TYPE, TRIGGER_NAME, DATA)
    VALUES (
        SYSDATE,
        'UPDATE',
        'LAB14_TABLE_AFTER_UPD_OPERATOR',
        NULL
    );
END;
/

CREATE OR REPLACE TRIGGER LAB14_TABLE_AFTER_DEL_OPERATOR
AFTER DELETE ON LAB14_TABLE
BEGIN
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_AFTER_DEL_OPERATOR: DELETE');
    INSERT INTO LAB14_AUDIT(OPERATION_DATE, OPERATION_TYPE, TRIGGER_NAME, DATA)
    VALUES (
        SYSDATE,
        'DELETE',
        'LAB14_TABLE_AFTER_DEL_OPERATOR',
        NULL
    );
END;
/


-- Задание №7 (9)
CREATE OR REPLACE TRIGGER LAB14_TABLE_AFTER_INS_ROW
AFTER INSERT ON LAB14_TABLE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_AFTER_INS_ROW: INSERT');
    INSERT INTO LAB14_AUDIT(OPERATION_DATE, OPERATION_TYPE, TRIGGER_NAME, DATA)
    VALUES (
        SYSDATE,
        'INSERT',
        'LAB14_TABLE_AFTER_INS_ROW',
        :NEW.ID || ' ' || :NEW.TITLE || ' ' || :NEW.DESCRIPTION
    );
END;
/

CREATE OR REPLACE TRIGGER LAB14_TABLE_AFTER_UPD_ROW
AFTER UPDATE ON LAB14_TABLE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_AFTER_UPD_ROW: UPDATE');
    INSERT INTO LAB14_AUDIT(OPERATION_DATE, OPERATION_TYPE, TRIGGER_NAME, DATA)
    VALUES (
        SYSDATE,
        'UPDATE',
        'LAB14_TABLE_AFTER_UPD_ROW',
        :OLD.ID || ' ' || :OLD.TITLE || ' ' || :OLD.DESCRIPTION || ' => ' || :NEW.ID || ' ' || :NEW.TITLE || ' ' || :NEW.DESCRIPTION
    );
END;
/

CREATE OR REPLACE TRIGGER LAB14_TABLE_AFTER_DEL_ROW
AFTER DELETE ON LAB14_TABLE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_AFTER_DEL_ROW: DELETE');
    INSERT INTO LAB14_AUDIT(OPERATION_DATE, OPERATION_TYPE, TRIGGER_NAME, DATA)
    VALUES (
        SYSDATE,
        'DELETE',
        'LAB14_TABLE_AFTER_DEL_ROW',
        :OLD.ID || ' ' || :OLD.TITLE || ' ' || :OLD.DESCRIPTION
    );
END;
/


-- Задание №14
INSERT INTO LAB14_TABLE(ID, TITLE, DESCRIPTION)
VALUES (555, 'Some title', 'Some description');
/

UPDATE LAB14_TABLE
SET
    TITLE = 'Some title 555',
    DESCRIPTION = 'Some description 555'
WHERE ID = 555;
/

DELETE FROM LAB14_TABLE
WHERE ID = 555;
/

SELECT * FROM LAB14_AUDIT;
/


-- Задание №10
INSERT INTO LAB14_TABLE(ID, TITLE, DESCRIPTION)
VALUES (1, 'Err', 'Err');
/

SELECT * FROM LAB14_AUDIT;
/


-- Задание №11
CREATE OR REPLACE TRIGGER TR_DROP_TABLE
BEFORE DROP ON SCHEMA
BEGIN
    IF ORA_DICT_OBJ_NAME = 'LAB14_TABLE' THEN
        RAISE_APPLICATION_ERROR(-20001,'TABLE CANNOT BE DROPED: ' || ORA_DICT_OBJ_NAME);
    END IF;
END;
/

DROP TABLE LAB14_TABLE;
/


-- Задание №12
DROP TABLE LAB14_AUDIT;
/


-- Задание №13
CREATE OR REPLACE VIEW V_LAB14_TABLE AS
    SELECT
        ID,
        TITLE,
        DESCRIPTION
    FROM LAB14_TABLE
;
/

CREATE OR REPLACE TRIGGER V_LAB14_TABLE_INSTED_OF_UPD
INSTEAD OF UPDATE ON V_LAB14_TABLE
FOR EACH ROW
BEGIN
    INSERT INTO LAB14_TABLE(ID, TITLE, DESCRIPTION)
    VALUES (:NEW.ID * 100, :NEW.TITLE, :NEW.DESCRIPTION);
    UPDATE LAB14_TABLE
    SET
        TITLE = '[OLD] ' || TITLE,
        DESCRIPTION = '[OLD] ' || DESCRIPTION
    WHERE ID = :NEW.ID;
END;
/

UPDATE V_LAB14_TABLE
SET TITLE = 'New title'
WHERE ID = 1;
/

SELECT * FROM V_LAB14_TABLE;
/


-- Задание №15
CREATE OR REPLACE TRIGGER LAB14_TABLE_AFTER_INS_1
AFTER INSERT ON LAB14_TABLE
BEGIN
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_AFTER_INS_1');
END;
/

CREATE OR REPLACE TRIGGER LAB14_TABLE_AFTER_INS_3
AFTER INSERT ON LAB14_TABLE
FOLLOWS LAB14_TABLE_AFTER_INS_2
BEGIN
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_AFTER_INS_3');
END;
/

CREATE OR REPLACE TRIGGER LAB14_TABLE_AFTER_INS_2
AFTER INSERT ON LAB14_TABLE
-- FOLLOWS LAB14_TABLE_AFTER_INS_1
BEGIN
    DBMS_OUTPUT.PUT_LINE('LAB14_TABLE_AFTER_INS_2');
END;
/

INSERT INTO LAB14_TABLE(ID, TITLE, DESCRIPTION)
VALUES (16, 'Tlt', 'Dsc');
/


-- Удаление
DROP VIEW V_LAB14_TABLE;
/

DROP TRIGGER TR_DROP_TABLE;
/

DROP TABLE LAB14_AUDIT;
/

DROP TABLE LAB14_TABLE;
/
